<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8' />
    <title>Adress in/out area</title>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.3.1/mapbox-gl.js'></script>
    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.3.1/mapbox-gl.css' rel='stylesheet' />
    <style>
        body { margin:0; padding:0; }
        #map { position:absolute; top:0; bottom:0; width:100%; }
    </style>
</head>
<body>
  <script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.1/mapbox-gl-geocoder.min.js'></script>
  <link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.1/mapbox-gl-geocoder.css' type='text/css' />
  <div id='map'> </div>
  <script>
    let areaCoord_1= <%= JSON.stringify(areaCoordinates[1])%>;
    let areaCoord_2= <%= JSON.stringify(areaCoordinates[2])%>;
    let areaCoord_3= <%= JSON.stringify(areaCoordinates[3])%>;
    function pointInPolygon(point, area) {    
    let x = parseFloat(point[0]), y = parseFloat(point[1]);
    let windingNumber = 0;

    for (let i = 0, j = area.length - 1; i < area.length; j = i++) {
      let xi = parseFloat(area[i][0]), yi = parseFloat(area[i][1]);
      let xj = parseFloat(area[j][0]), yj = parseFloat(area[j][1]);

      if (yj <= y) {
        if (yi > y) {
          if (isLeft([xj, yj], [xi, yi], [x,y]) > 0) {
            windingNumber++;
          }
        }
      } else {
        if (yi <= y) {
          if (isLeft([xj, yj], [xi, yi], [x, y]) < 0) {
            windingNumber--;
          }
        }
      }
    }

    return windingNumber != 0;
};


function isLeft(P0, P1, P2)
{
    var res = ( (P1[0] - P0[0]) * (P2[1] - P0[1])
            - (P2[0] -  P0[0]) * (P1[1] - P0[1]) );
    return res;
};
  mapboxgl.accessToken = "<%= token %>";
  var map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/mapbox/streets-v11',
      center: [-73.943851,40.720021],
      zoom: 13
  });
  var geocoder =new MapboxGeocoder({
  accessToken: mapboxgl.accessToken,
  mapboxgl: mapboxgl
  });
  map.addControl(geocoder);
  geocoder.on('result', function(result) {
    let inarea1=pointInPolygon(result.result.geometry.coordinates, areaCoord_1)
    let inarea2=pointInPolygon(result.result.geometry.coordinates, areaCoord_2)
    let inarea3=pointInPolygon(result.result.geometry.coordinates, areaCoord_3)
    if (inarea1) {
      alert("the adress is in the area 1");
    } else if (inarea2)  {
      alert("the adress is in the area 2");
    } else if (inarea3) {
      alert("the adress is in the area 3");
    } else {
      alert("the adress is out the area");
    }
  });
  map.on('load', function () {
    map.addSource("checked-area", {
      "type": "geojson",
      "data": {
        "type": "FeatureCollection",
        "features": [{
          "type": "Feature",
          'properties': {
            'color': '#15b307',
            'opacity': 0.6
            },
          "geometry": {
            "type": "Polygon",
            "coordinates": [
            areaCoord_1
            ]
          }
        },{
          "type": "Feature",
          'properties': {
            'color': '#d0d61a',
            'opacity' : 0.4
            },
          "geometry": {
            "type": "Polygon",
            "coordinates": [
            areaCoord_2
            ]
          }
        },{
          "type": "Feature",
          'properties': {
            'color': '#ffa600',
            'opacity': 0.2
            },
          "geometry": {
            "type": "Polygon",
            "coordinates": [
            areaCoord_3
            ]
          }
        }, {
          "type": "Feature",
          "geometry": {
            "type": "Point",
            "coordinates": [-73.943991, 40.720172]
          }
        }]
      }
      });
      map.addLayer({
      "id": "area-boundary",
      "type": "fill",
      "source": "checked-area",
      "paint": {
      "fill-color": ['get', 'color'],
      "fill-opacity": ['get', 'opacity']
      },
      "filter": ["==", "$type", "Polygon"]
      });
      map.addLayer({
        "id": "area-store",
        "type": "circle",
        "source": "checked-area",
        "paint": {
        "circle-radius": 6,
        "circle-color": "#B42222"
        },
        "filter": ["==", "$type", "Point"],
      });
    });
  </script>

</body>
</html>